// demo only not for production
package main

import (
	"fmt"
	"log"
	"math/rand"
	"net/http"
	"strings"
	"time"

	"github.com/julienschmidt/httprouter"
	"github.com/mailgun/groupcache"
)

var protocol string = "http://"
var port string = ":80"

func main() {
	// Discover peers using GCP Compute Instances Meta
	_self, _peers := discoverPeers()
	ip := _self.NetworkInterfaces[0].NetworkIP
	ipExternal := _self.NetworkInterfaces[0].AccessConfigs[0].NatIP

	// Obtain HTTP endpoints of peers for groupcache config
	var peers []string
	self := protocol + _self.NetworkInterfaces[0].NetworkIP + port
	for _, _peer := range _peers {
		peer := protocol + _peer.NetworkInterfaces[0].NetworkIP + port
		peers = append(peers, peer)
	}

	// Initialize groupcache
	halfGB := 1 << 29
	cacheTTL := time.Now().Add(5 * time.Minute)
	pool := groupcache.NewHTTPPoolOpts(self, &groupcache.HTTPPoolOptions{})
	pool.Set(peers...) // should be put in cron in case of autoscale

	// Initialize groupcache "generator"
	groupcache.NewGroup("generator", int64(halfGB), groupcache.GetterFunc(
		// If cache miss, this function will be called
		func(ctx groupcache.Context, id string, dest groupcache.Sink) error {
			t := int(rand.Float32() * 1000)
			time.Sleep(time.Duration(t) * time.Millisecond)
			msg := fmt.Sprintf("This string is generated by %v (%v) in %v ms.", ipExternal, ip, t)
			dest.SetString(msg, cacheTTL)
			return nil
		},
	))

	// Initialize http router
	router := httprouter.New()

	// This will be used by groupcache to communicate with each otheer
	router.Handler("GET", "/_groupcache/:group/:key", pool)

	// This will be used by our application to demo groupcache
	router.Handler("GET", "/hello", &SimpleHandler{IP: ip, IPExternal: ipExternal})

	log.Printf("Hi I'm a webserver on %v (%v). My groupcache peers are %v\n", ip, ipExternal, strings.Join(peers, ", "))
	log.Printf("Listening and serving at port %v\n", port)

	// Bind to port 80 on 0.0.0.0
	// Don't forget to use sudo and make sure port 80 are already open
	err := http.ListenAndServe(":80", router)
	if err != nil {
		log.Println("Error bind", err)
		return
	}
}
